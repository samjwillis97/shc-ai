# HttpCraft Configuration with Custom Secret Resolver (Phase 14)
# 
# This example demonstrates the RECOMMENDED approach for secret management
# using the Custom Secret Resolver System. This eliminates plugin dependency
# ordering issues and enables API-specific secret mappings.

# Global configuration
config:
  defaultProfile: "production"

# Global plugin definition - configured once
plugins:
  - path: "./plugins/rqp-secrets.js"
    name: "rqp-secrets"
    config:
      # Secret provider configuration
      provider: "vault"
      baseUrl: "{{env.VAULT_URL}}"
      token: "{{env.VAULT_TOKEN}}"
      mountPath: "secret"
      apiVersion: "v2"
      
      # Global default settings
      timeout: 10000
      debug: false
      failOnError: true

# Profiles for different environments
profiles:
  production:
    variables:
      environment: "prod"
      
  development:
    variables:
      environment: "dev"

# API definitions with API-specific secret mappings
apis:
  # User Service API - uses user-service secrets
  userAPI:
    baseUrl: "https://user-api.example.com"
    
    # API-specific secret mapping
    plugins:
      - name: "rqp-secrets"
        config:
          secretMapping:
            API_KEY: "user-service/credentials#api-key"
            DB_PASSWORD: "user-service/database#password"
            JWT_SECRET: "user-service/auth#jwt-secret"
    
    headers:
      # Standard {{secret.*}} syntax with automatic masking
      Authorization: "Bearer {{secret.API_KEY}}"
      X-Environment: "{{environment}}"
    
    endpoints:
      getUser:
        method: GET
        path: "/users/{{userId}}"
        
      createUser:
        method: POST
        path: "/users"
        body:
          username: "{{username}}"
          email: "{{email}}"
          # Secrets in request bodies are automatically masked
          jwt_secret: "{{secret.JWT_SECRET}}"

  # Payment Service API - uses different secrets
  paymentAPI:
    baseUrl: "https://payment-api.example.com"
    
    # Different secret mapping for this API
    plugins:
      - name: "rqp-secrets"
        config:
          secretMapping:
            API_KEY: "payment-service/credentials#api-key"
            STRIPE_SECRET: "payment-service/stripe#secret-key"
            WEBHOOK_SECRET: "payment-service/webhooks#secret"
    
    headers:
      # Same syntax, different secrets automatically fetched
      Authorization: "Bearer {{secret.API_KEY}}"
      X-Stripe-Secret: "{{secret.STRIPE_SECRET}}"
    
    endpoints:
      processPayment:
        method: POST
        path: "/payments"
        body:
          amount: "{{amount}}"
          currency: "{{currency}}"
          # Different API, different secrets, same syntax
          webhook_secret: "{{secret.WEBHOOK_SECRET}}"

  # Notification Service API - minimal secret usage
  notificationAPI:
    baseUrl: "https://notify.example.com"
    
    # Only needs one secret for this API
    plugins:
      - name: "rqp-secrets"
        config:
          secretMapping:
            NOTIFICATION_KEY: "notification-service/api#key"
    
    headers:
      Authorization: "Bearer {{secret.NOTIFICATION_KEY}}"
    
    endpoints:
      sendEmail:
        method: POST
        path: "/send"
        body:
          to: "{{recipient}}"
          subject: "{{subject}}"
          message: "{{message}}"

# Chains work seamlessly with API-specific secrets
chains:
  completeUserFlow:
    description: "Complete user onboarding with different service secrets"
    vars:
      username: "testuser"
      email: "test@example.com"
      amount: "100.00"
    
    steps:
      # Step 1: Create user (uses user-service secrets)
      - id: createUser
        call: userAPI.createUser
        with:
          body:
            username: "{{username}}"
            email: "{{email}}"
      
      # Step 2: Process payment (uses payment-service secrets)  
      - id: processPayment
        call: paymentAPI.processPayment
        with:
          body:
            user_id: "{{steps.createUser.response.body.id}}"
            amount: "{{amount}}"
            currency: "USD"
      
      # Step 3: Send notification (uses notification-service secrets)
      - id: sendWelcome
        call: notificationAPI.sendEmail
        with:
          body:
            recipient: "{{email}}"
            subject: "Welcome!"
            message: "Your account has been created and payment processed."

# Key Benefits of This Approach:
#
# 1. NO PLUGIN ORDERING DEPENDENCIES
#    - Plugin loading order doesn't matter
#    - Each API gets its secrets on-demand
#
# 2. API-SPECIFIC SECRET MAPPINGS  
#    - Different APIs use different secrets from same provider
#    - No global secret loading waste
#
# 3. AUTOMATIC SECRET MASKING
#    - All {{secret.*}} values are masked in verbose/dry-run output
#    - Works through HttpCraft's built-in security system
#
# 4. PERFORMANCE OPTIMIZED
#    - Secrets cached with TTL
#    - Only fetched when actually used
#
# 5. MULTIPLE PROVIDER SUPPORT
#    - Can use different secret backends per API
#    - Graceful fallback to environment variables
#
# Usage Examples:
#
# # Only fetches user-service secrets
# httpcraft userAPI createUser --var username=alice
#
# # Only fetches payment-service secrets  
# httpcraft paymentAPI processPayment --var amount=50.00
#
# # Fetches all three service secrets as needed
# httpcraft chain completeUserFlow --var username=bob 